#!/bin/sh

JAVA_OPTS='-Xms2000m -Xmx6000m -server -Djava.awt.headless=true'

# These should be the same as in project/build.properties
VERSION_APP=0.1-SNAPSHOT
APP=colinh

# Not frequently changed
MAIN_CLASS='colinh.Boot'
VERSION_SCALA=2.8.0

set_class_path() {
  if [ -d src ]  # Exists implies development environment
  then
    CLASS_PATH="project/boot/scala-$VERSION_SCALA/lib/*:lib_managed/scala_$VERSION_SCALA/compile/*:target/scala_$VERSION_SCALA/classes:target/scala_$VERSION_SCALA/resources:config"
  else
    JAVA_OPTS="$JAVA_OPTS -Dxitrum.mode=production"
    CLASS_PATH="lib/*:config"
  fi
}

start() {
  set_class_path
  java $JAVA_OPTS -cp $CLASS_PATH $MAIN_CLASS
}

console() {
  set_class_path
  echo $CLASS_PATH
  java $JAVA_OPTS -cp $CLASS_PATH:lib_managed/scala_$VERSION_SCALA/xitrum_console/* scala.tools.nsc.MainGenericRunner -usejavacp
}

release() {
  DIR_BASE=target/$APP-$VERSION_APP
  DIR_LIB=$DIR_BASE/lib

  rm -rf target/$APP*

  mkdir -p $DIR_BASE
  cp README $DIR_BASE
  cp API    $DIR_BASE

  mkdir $DIR_LIB
  sbt clean
  sbt package
  cp target/scala_$VERSION_SCALA/"$APP"_$VERSION_SCALA-$VERSION_APP.jar $DIR_LIB
  cp lib_managed/scala_$VERSION_SCALA/compile/*.jar $DIR_LIB
  if [ -f lib ]; then cp lib/*.jar $DIR_LIB; fi
  cp project/boot/scala-$VERSION_SCALA/lib/scala-library.jar $DIR_LIB/scala-library-$VERSION_SCALA.jar

  # Do not copy directory (e.g. cp -r) to avoid hidden files

  mkdir $DIR_BASE/script
  cp script/* $DIR_BASE/script

  mkdir $DIR_BASE/config
  cp config/* $DIR_BASE/config

  cd target
  tar cjf $APP-$VERSION_APP.tar.bz2 $APP-$VERSION_APP
}

case "$1" in
  release)
    release
    ;;
  console)
    console
    ;;
  *)
    start
esac
